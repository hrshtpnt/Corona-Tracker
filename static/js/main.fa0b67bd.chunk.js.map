{"version":3,"sources":["Components/Charts/Charts.module.css","images/sort-black.svg","app.module.css","images/corona.png","Components/WorldTable/worldTable.module.css","api/index.js","Components/Charts/Charts.jsx","Components/CountryPicker/CountryPicker.jsx","Components/Cards/Cards.jsx","Components/WorldTable/WorldTable.jsx","App.js","serviceWorker.js","index.js","Components/Cards/Cards.module.css"],"names":["module","exports","url","fetchData","a","country","tempUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","reportDate","Date","toDateString","split","join","fetchCountries","countries","name","fetchTableData","index","casesSummary","todayCases","cases","deathSummary","todayDeaths","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","barChart","backgroundColor","value","options","legend","display","title","text","className","styles","container","CountryPicker","handleCountryChange","setCountries","FormControl","InputLabel","shrink","id","NativeSelect","onChange","e","target","i","key","Cards","undefined","Grid","spacing","justfy","item","component","Card","xs","md","classnames","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","separator","duration","columns","minWidth","align","useStyles","makeStyles","root","width","maxHeight","StickyHeadTable","classes","page","setPage","rowsPerPage","setRowsPerPage","rows","setRows","fetchWorldData","sortText","src","sortImage","alt","Button","size","rootButton","onClick","sort","b","rootTable","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","style","TableBody","slice","row","hover","role","tabIndex","code","format","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","App","state","fetchedData","setState","this","coronaImage","WorldTable","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa0b67bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__rnzyX\"};","module.exports = __webpack_public_path__ + \"static/media/sort-black.f94dfe67.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2JKVN\"};","module.exports = __webpack_public_path__ + \"static/media/corona.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"worldTable_container__2oPiO\",\"root\":\"worldTable_root__2TtJs\",\"rootTable\":\"worldTable_rootTable__2Ilfb\",\"rootButton\":\"worldTable_rootButton__272uV\",\"sortText\":\"worldTable_sortText__YN-QW\"};","import axios from \"axios\";\nconst url = \"https://covid19.mathdro.id/api\";\n\nconst tableAPI = \"https://sharadcodes.github.io/c-data/data/world.json\";\n\nexport const fetchData = async (country = \"\") => {\n  let tempUrl = url;\n  if (country !== \"\") {\n    tempUrl = `${url}/countries/${country}`;\n  }\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(tempUrl);\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (e) {\n    console.log(\"API fetch error\");\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      reportDate: new Date(dailyData.reportDate)\n        .toDateString()\n        .split(\"2020\")\n        .join(\"\"),\n    }));\n    return modifiedData;\n  } catch (e) {\n    console.log(\"API fetch error - fetch daily data\");\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n    return countries.map((country) => country.name);\n  } catch (e) {\n    console.log(\"fetch countries failed with \" + e);\n  }\n};\n\nexport const fetchTableData = async () => {\n  try {\n    const data = await axios.get(tableAPI);\n    console.log(data.data);\n    const modifiedData = data.data.map((index) => ({\n      ...index,\n      casesSummary:\n        index.todayCases !== 0\n          ? `${index.cases}+${index.todayCases} Today`\n          : index.cases,\n      deathSummary:\n        index.todayDeaths !== 0\n          ? `${index.deaths}+${index.todayDeaths} Today`\n          : index.deaths,\n    }));\n    return modifiedData;\n  } catch (e) {\n    console.log(\"table API failed with \" + e);\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { fetchDailyData } from \"../../api/index\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Charts.module.css\";\n\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    fetchAPI();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ reportDate }) => reportDate),\n        datasets: [\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Infected\",\n            borderColor: \"#FF6550\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Recovered\",\n            borderColor: \"cornflowerblue\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Confirmed\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Charts;\n","import React, { useEffect, useState } from \"react\";\nimport { FormControl, NativeSelect, InputLabel } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../api/index\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n    fetchAPI();\n  }, []);\n\n  return (\n    <div className=\"row\">\n      <FormControl>\n        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n          Country\n        </InputLabel>\n        <NativeSelect onChange={(e) => handleCountryChange(e.target.value)}>\n          <option value=\"\">Global</option>\n          {countries.map((country, i) => (\n            <option key={i} value={country}>\n              {country}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport classnames from \"classname\";\nimport CountUp from 'react-countup';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (confirmed === undefined) {\n    return <p>Loading ...</p>;\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justfy=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={classnames(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n              <CountUp \n              start={0}\n              end={confirmed.value}\n              separator=','\n              duration={2}\n              />\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={classnames(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n            <CountUp \n              start={0}\n              end={recovered.value}\n              separator=','\n              duration={2}\n              />\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Number of recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={classnames(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n            <CountUp \n              start={0}\n              end={deaths.value}\n              separator=','\n              duration={2}\n              />\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Number of deaths from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Button,\n} from \"@material-ui/core\";\nimport { fetchTableData } from \"../../api/index\";\nimport styles from \"./worldTable.module.css\";\nimport sortImage from \"../../images/sort-black.svg\";\n\nconst columns = [\n  {\n    id: \"country\",\n    label: \"Country\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"casesSummary\",\n    label: \"Total Cases\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"deathSummary\",\n    label: \"Deaths\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"recovered\",\n    label: \"Recovered\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"active\",\n    label: \"Active\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"critical\",\n    label: \"Critical\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"tests\",\n    label: \"Tests\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"casesPerOneMillion\",\n    label: \"Cases/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"deathsPerOneMillion\",\n    label: \"Deaths/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"recoveredPerOneMillion\",\n    label: \"Recovered/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"activePerOneMillion\",\n    label: \"Active/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"criticalPerOneMillion\",\n    label: \"Critical/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"testsPerOneMillion\",\n    label: \"Tests/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n];\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  container: {\n    maxHeight: 800,\n  },\n});\n\nfunction StickyHeadTable() {\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(100);\n  const [rows, setRows] = useState([]);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const fetchWorldData = async () => {\n    setRows(await fetchTableData());\n  };\n\n  useEffect(() => {\n    fetchWorldData();\n  }, []);\n\n  const handleSortByCases = () => {\n    setRows(\n      [...rows].sort((a, b) => {\n        return b.cases - a.cases;\n      })\n    );\n  };\n\n  const handleSortByDeaths = () => {\n    setRows(\n      [...rows].sort((a, b) => {\n        return b.deaths - a.deaths;\n      })\n    );\n  };\n\n  const handleSortByRecovered = () => {\n    setRows(\n      [...rows].sort((a, b) => {\n        return b.recovered - a.recovered;\n      })\n    );\n  };\n\n  const clearSort = () => {\n    fetchWorldData();\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.root}>\n        <h5 className={styles.sortText}>\n          <img src={sortImage} alt=\"sort\" />\n          Sort\n        </h5>\n        <Button\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={styles.rootButton}\n          onClick={handleSortByCases}\n        >\n          Cases\n        </Button>\n        <Button\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={styles.rootButton}\n          onClick={handleSortByDeaths}\n        >\n          Deaths\n        </Button>\n        <Button\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"primary\"\n          className={styles.rootButton}\n          onClick={handleSortByRecovered}\n        >\n          Recovered\n        </Button>\n        <Button\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"primary\"\n          className={styles.rootButton}\n          onClick={clearSort}\n        >\n          Clear Sort\n        </Button>\n      </div>\n      <div className={styles.rootTable}>\n        <Paper className={classes.root}>\n          <TableContainer className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n              <TableHead>\n                <TableRow>\n                  {columns.map((column) => (\n                    <TableCell\n                      key={column.id}\n                      align={column.align}\n                      style={{ minWidth: column.minWidth }}\n                    >\n                      {column.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {rows\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row) => {\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        key={row.code}\n                      >\n                        {columns.map((column) => {\n                          const value = row[column.id];\n                          return (\n                            <TableCell key={column.id} align={column.align}>\n                              {column.format && typeof value === \"number\"\n                                ? column.format(value)\n                                : value}\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    );\n                  })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[100, 150, 300]}\n            component=\"div\"\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n          />\n        </Paper>\n      </div>\n    </div>\n  );\n}\n\nexport default StickyHeadTable;\n","import React, { Component } from \"react\";\nimport { Cards, CountryPicker, Charts, WorldTable } from \"./Components/index\";\nimport styles from \"./app.module.css\";\nimport { fetchData } from \"./api/index\";\nimport  coronaImage from '../src/images/corona.png'\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({\n      data: fetchedData,\n    });\n  }\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({\n      data: fetchedData,\n      country: country\n    });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img src={coronaImage} alt='Corona'/>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Charts data={data} country={country} />\n        <h3>Global Statistics</h3>\n        <WorldTable />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\"};"],"sourceRoot":""}