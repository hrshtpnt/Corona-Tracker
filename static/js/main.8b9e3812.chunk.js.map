{"version":3,"sources":["Components/Charts/Charts.module.css","images/sort-black.svg","images/corona.png","Components/IndiaStatus/IndiaStatus.module.css","Components/WorldTable/worldTable.module.css","api/index.js","Components/Charts/Charts.jsx","Components/CountryPicker/CountryPicker.jsx","Components/Cards/Cards.jsx","Components/WorldTable/WorldTable.jsx","Components/IndiaStatus/IndiaStatus.jsx","App.js","serviceWorker.js","index.js","Components/Cards/Cards.module.css","app.module.css"],"names":["module","exports","url","fetchData","a","country","tempUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","reportDate","Date","toDateString","split","join","fetchCountries","countries","name","fetchTableData","index","casesSummary","todayCases","cases","deathSummary","todayDeaths","fetchIndiaData","Object","entries","e","statesList","stateName","push","shift","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","barChart","backgroundColor","value","options","legend","display","title","text","className","styles","container","CountryPicker","handleCountryChange","setCountries","FormControl","InputLabel","shrink","id","NativeSelect","onChange","target","i","key","Cards","undefined","Grid","spacing","justfy","item","component","Card","xs","md","classnames","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","separator","duration","columns","minWidth","align","useStyles","makeStyles","root","width","maxHeight","StickyHeadTable","classes","page","setPage","rowsPerPage","setRowsPerPage","rows","setRows","fetchWorldData","width100","sortText","src","sortImage","alt","Button","size","rootButton","onClick","sort","b","rootTable","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","style","TableBody","slice","row","hover","role","tabIndex","code","format","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","IndiaStatus","indiaData","setIndiaData","districtData","setDistrictData","position","stateData","setStateData","setSeletedDistrict","active","coronaInfo","setCoronaInfo","indiaStatus","selectedDataHeading","formControl","indianState","pos","names","districtNames","handleStateChange","selectedIndex","disabled","district","covidInfo","deceased","handleDistrictSelect","tiles","type","App","state","fetchedData","setState","this","coronaImage","WorldTable","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8b9e3812.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__rnzyX\"};","module.exports = __webpack_public_path__ + \"static/media/sort-black.f94dfe67.svg\";","module.exports = __webpack_public_path__ + \"static/media/corona.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indiaStatus\":\"IndiaStatus_indiaStatus__1-bbP\",\"selectedDataHeading\":\"IndiaStatus_selectedDataHeading__2sOGS\",\"formControl\":\"IndiaStatus_formControl__4HH3H\",\"selectedData\":\"IndiaStatus_selectedData__1rfr_\",\"tiles\":\"IndiaStatus_tiles__32AHk\",\"type\":\"IndiaStatus_type__2JAEB\",\"active\":\"IndiaStatus_active__3BJxc\",\"confirmed\":\"IndiaStatus_confirmed__1FKYm\",\"recovered\":\"IndiaStatus_recovered__1jM5Q\",\"deaths\":\"IndiaStatus_deaths__36Vhk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"worldTable_container__2oPiO\",\"width100\":\"worldTable_width100__2wUeC\",\"root\":\"worldTable_root__2TtJs\",\"rootTable\":\"worldTable_rootTable__2Ilfb\",\"rootButton\":\"worldTable_rootButton__272uV\",\"sortText\":\"worldTable_sortText__YN-QW\",\"sortImage\":\"worldTable_sortImage__15FNf\"};","import axios from \"axios\";\nconst url = \"https://covid19.mathdro.id/api\";\nconst tableAPI = \"https://sharadcodes.github.io/c-data/data/world.json\";\nconst IndianStates = \"https://api.covid19india.org/state_district_wise.json\";\n\nexport const fetchData = async (country = \"\") => {\n  let tempUrl = url;\n  if (country !== \"\") {\n    tempUrl = `${url}/countries/${country}`;\n  }\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(tempUrl);\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (e) {\n    console.log(\"API fetch error\");\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      reportDate: new Date(dailyData.reportDate)\n        .toDateString()\n        .split(\"2020\")\n        .join(\"\"),\n    }));\n    return modifiedData;\n  } catch (e) {\n    console.log(\"API fetch error - fetch daily data\");\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n    return countries.map((country) => country.name);\n  } catch (e) {\n    console.log(\"fetch countries failed with \" + e);\n  }\n};\n\nexport const fetchTableData = async () => {\n  try {\n    const data = await axios.get(tableAPI);\n    const modifiedData = data.data.map((index) => ({\n      ...index,\n      casesSummary:\n        index.todayCases !== 0\n          ? `${index.cases}+${index.todayCases} Today`\n          : index.cases,\n      deathSummary:\n        index.todayDeaths !== 0\n          ? `${index.deaths}+${index.todayDeaths} Today`\n          : index.deaths,\n    }));\n    return modifiedData;\n  } catch (e) {\n    console.log(\"table API failed with \" + e);\n  }\n};\n  export const fetchIndiaData = async () => {\n    try {\n      const data = await axios.get(IndianStates);\n      const modifiedData = Object.entries(data.data).map((e) => ( { [e[0]]: e[1] } ));\n      const statesList = [];\n      for (let statesData of modifiedData) {\n        for (let stateName in statesData) {\n          statesList.push(stateName);\n        }\n      }\n      statesList.shift();\n      return [modifiedData, statesList];\n    }\n    catch(e) {\n      console.log('India API failed to fetch data')\n    }\n  };\n","import React, { useEffect, useState } from \"react\";\nimport { fetchDailyData } from \"../../api/index\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Charts.module.css\";\n\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    fetchAPI();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ reportDate }) => reportDate),\n        datasets: [\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Infected\",\n            borderColor: \"#FF6550\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Recovered\",\n            borderColor: \"cornflowerblue\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Confirmed\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Charts;\n","import React, { useEffect, useState } from \"react\";\nimport { FormControl, NativeSelect, InputLabel } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../api/index\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n    fetchAPI();\n  }, []);\n\n  return (\n    <div className=\"row\">\n      <FormControl>\n        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n          Country\n        </InputLabel>\n        <NativeSelect onChange={(e) => handleCountryChange(e.target.value)}>\n          <option value=\"\">Global</option>\n          {countries.map((country, i) => (\n            <option key={i} value={country}>\n              {country}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport classnames from \"classname\";\nimport CountUp from 'react-countup';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (confirmed === undefined) {\n    return <p>Loading ...</p>;\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justfy=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={classnames(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n              <CountUp \n              start={0}\n              end={confirmed.value}\n              separator=','\n              duration={2}\n              />\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={classnames(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n            <CountUp \n              start={0}\n              end={recovered.value}\n              separator=','\n              duration={2}\n              />\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Number of recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={classnames(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n            <CountUp \n              start={0}\n              end={deaths.value}\n              separator=','\n              duration={2}\n              />\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Number of deaths from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Button,\n} from \"@material-ui/core\";\nimport { fetchTableData } from \"../../api/index\";\nimport styles from \"./worldTable.module.css\";\nimport sortImage from \"../../images/sort-black.svg\";\nimport classnames from \"classname\";\n\nconst columns = [\n  {\n    id: \"country\",\n    label: \"Country\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"casesSummary\",\n    label: \"Total Cases\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"deathSummary\",\n    label: \"Deaths\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"recovered\",\n    label: \"Recovered\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"active\",\n    label: \"Active\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"critical\",\n    label: \"Critical\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"tests\",\n    label: \"Tests\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"casesPerOneMillion\",\n    label: \"Cases/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"deathsPerOneMillion\",\n    label: \"Deaths/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"recoveredPerOneMillion\",\n    label: \"Recovered/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"activePerOneMillion\",\n    label: \"Active/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"criticalPerOneMillion\",\n    label: \"Critical/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n  {\n    id: \"testsPerOneMillion\",\n    label: \"Tests/Million\",\n    minWidth: 50,\n    align: \"center\",\n  },\n];\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  container: {\n    maxHeight: 800,\n  },\n});\n\nfunction StickyHeadTable() {\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(100);\n  const [rows, setRows] = useState([]);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const fetchWorldData = async () => {\n    setRows(await fetchTableData());\n  };\n\n  useEffect(() => {\n    fetchWorldData();\n  }, []);\n\n  const handleSortByCases = () => {\n    setRows(\n      [...rows].sort((a, b) => {\n        return b.cases - a.cases;\n      })\n    );\n  };\n\n  const handleSortByDeaths = () => {\n    setRows(\n      [...rows].sort((a, b) => {\n        return b.deaths - a.deaths;\n      })\n    );\n  };\n\n  const handleSortByRecovered = () => {\n    setRows(\n      [...rows].sort((a, b) => {\n        return b.recovered - a.recovered;\n      })\n    );\n  };\n\n  const clearSort = () => {\n    fetchWorldData();\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={classnames(styles.width100, \"row\")}>\n        <div className={classnames(styles.root, \"col-sm-12\")}>\n          <h6 className={styles.sortText}>\n            <img src={sortImage} alt=\"sort\" className={styles.sortImage} />\n            Sort\n          </h6>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            className={styles.rootButton}\n            onClick={handleSortByCases}\n          >\n            Cases\n          </Button>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            className={styles.rootButton}\n            onClick={handleSortByDeaths}\n          >\n            Deaths\n          </Button>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"primary\"\n            className={styles.rootButton}\n            onClick={handleSortByRecovered}\n          >\n            Recovered\n          </Button>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"primary\"\n            className={styles.rootButton}\n            onClick={clearSort}\n          >\n            Clear Sort\n          </Button>\n        </div>\n      </div>\n      <div className={styles.rootTable}>\n        <Paper className={classes.root}>\n          <TableContainer className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n              <TableHead>\n                <TableRow>\n                  {columns.map((column) => (\n                    <TableCell\n                      key={column.id}\n                      align={column.align}\n                      style={{ minWidth: column.minWidth }}\n                    >\n                      {column.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {rows\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row) => {\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        key={row.code}\n                      >\n                        {columns.map((column) => {\n                          const value = row[column.id];\n                          return (\n                            <TableCell key={column.id} align={column.align}>\n                              {column.format && typeof value === \"number\"\n                                ? column.format(value)\n                                : value}\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    );\n                  })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[100, 150, 300]}\n            component=\"div\"\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n          />\n        </Paper>\n      </div>\n    </div>\n  );\n}\n\nexport default StickyHeadTable;\n","import React, { useEffect, useState } from \"react\";\nimport { fetchIndiaData } from \"../../api/index\";\nimport { FormControl, NativeSelect, InputLabel } from \"@material-ui/core\";\nimport styles from \"./IndiaStatus.module.css\";\nimport classnames from \"classname\";\nfunction IndiaStatus() {\n  const [indiaData, setIndiaData] = useState();\n  const [districtData, setDistrictData] = useState([]);\n  const [stateData, setStateData] = useState({ name: \"\", position: 0 });\n  const [selectedDistrict, setSeletedDistrict] = useState(\"\");\n  const [coronaInfo, setCoronaInfo] = useState({\n    active: 0,\n    recovered: 0,\n    deaths: 0,\n    confirmed: 0,\n  });\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setIndiaData(await fetchIndiaData());\n    };\n    fetchAPI();\n  }, []);\n\n  const handleStateChange = (indianState, pos) => {\n    //indiaData[0][2]['Andhra Pradesh'].districtData\n    const names =\n      indianState !== \"\" && indiaData[0][pos][indianState].districtData;\n    const districtNames = [];\n    for (let name in names) {\n      districtNames.push(name);\n    }\n    setStateData({ name: indianState, position: pos });\n    setDistrictData(districtNames);\n  };\n\n  const handleDistrictSelect = (district) => {\n    const { name, position } = stateData;\n    const covidInfo = indiaData[0][position][name].districtData[district];\n    setSeletedDistrict(district);\n    setCoronaInfo({\n      active: covidInfo.active,\n      recovered: covidInfo.recovered,\n      confirmed: covidInfo.confirmed,\n      deaths: covidInfo.deceased,\n    });\n  };\n\n  if (indiaData === undefined) {\n    return <p>Loading ...</p>;\n  } else {\n    return (\n      <div className={styles.indiaStatus}>\n        <div className={classnames(styles.indiaStatus, styles.selectedDataHeading)}>\n          <FormControl className={styles.formControl}>\n            <InputLabel shrink id=\"state\">\n              State / UT\n            </InputLabel>\n            <NativeSelect\n              onChange={(e) =>\n                handleStateChange(e.target.value, e.target.selectedIndex)\n              }\n            >\n              <option value={[]}>Select State</option>\n              {indiaData[1].map((item, i) => (\n                <option key={i} value={item}>\n                  {item}\n                </option>\n              ))}\n            </NativeSelect>\n          </FormControl>\n          <FormControl\n            className={styles.formControl}\n            disabled={!districtData.length > 0}\n          >\n            <InputLabel shrink id=\"district\">\n              District\n            </InputLabel>\n            <NativeSelect\n              onChange={(e) => handleDistrictSelect(e.target.value)}\n            >\n              <option value={[]}>Select District</option>\n              {districtData.map((item, i) => (\n                <option key={i} value={item}>\n                  {item}\n                </option>\n              ))}\n            </NativeSelect>\n          </FormControl>\n        </div>\n\n        <div className={styles.indiaStatus}>\n          <div className={classnames(styles.tiles, styles.active)}>\n            <h6 className={styles.type}>Active</h6>\n            <p>{coronaInfo.active}</p>\n          </div>\n          <div className={classnames(styles.tiles, styles.recovered)}>\n            <h6 className={styles.type}>Recovered</h6>\n            <p>{coronaInfo.recovered}</p>\n          </div>\n          <div className={classnames(styles.tiles, styles.deaths)}>\n            <h6 className={styles.type}>Deaths</h6>\n            <p>{coronaInfo.deaths}</p>\n          </div>\n          <div className={classnames(styles.tiles, styles.confirmed)}>\n            <h6 className={styles.type}>Confirmed</h6>\n            <p>{coronaInfo.confirmed}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default IndiaStatus;\n","import React, { Component } from \"react\";\nimport { Cards, CountryPicker, Charts, WorldTable, IndiaStatus } from \"./Components/index\";\nimport styles from \"./app.module.css\";\nimport { fetchData } from \"./api/index\";\nimport  coronaImage from '../src/images/corona.png'\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({\n      data: fetchedData,\n    });\n  }\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({\n      data: fetchedData,\n      country: country\n    });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.coronaImage} src={coronaImage} alt='Corona'/>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Charts data={data} country={country} />\n        <h3>India Statistics</h3>\n        <IndiaStatus />\n        <h3>Global Statistics</h3>\n        <WorldTable />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2JKVN\",\"coronaImage\":\"app_coronaImage__3giRr\"};"],"sourceRoot":""}