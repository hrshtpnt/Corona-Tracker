{"version":3,"sources":["Components/Charts/Charts.module.css","images/sort-black.svg","Components/IndianStatesTable/IndianStatesTable.module.css","images/corona.png","Components/WorldTable/worldTable.module.css","Components/IndiaStatus/IndiaStatus.module.css","api/index.js","Components/Charts/Charts.jsx","Components/CountryPicker/CountryPicker.jsx","Components/Cards/Cards.jsx","Components/WorldTable/WorldTable.jsx","Components/MiniCard/MiniCard.jsx","Components/IndianStatesTable/IndianStatesTable.jsx","Components/IndiaStatus/IndiaStatus.jsx","App.js","serviceWorker.js","index.js","Components/Cards/Cards.module.css","Components/MiniCard/MiniCard.module.css","app.module.css"],"names":["module","exports","url","fetchData","a","country","tempUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","reportDate","Date","toDateString","split","join","fetchCountries","countries","name","fetchTableData","index","casesSummary","todayCases","cases","deathSummary","todayDeaths","fetchIndiaData","Object","entries","e","statesList","stateName","push","shift","fetchIndianStatesReport","state","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","barChart","backgroundColor","value","options","legend","display","title","text","className","styles","container","CountryPicker","handleCountryChange","setCountries","FormControl","InputLabel","shrink","id","NativeSelect","onChange","target","i","key","Cards","undefined","Grid","spacing","justfy","item","component","Card","xs","md","classnames","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","separator","duration","columns","minWidth","align","useStyles","makeStyles","root","width","maxHeight","StickyHeadTable","classes","page","setPage","rowsPerPage","setRowsPerPage","rows","setRows","fetchWorldData","Fragment","Divider","width70","width100","sortText","src","sortImage","alt","Button","size","rootButton","onClick","sort","b","rootTable","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","style","TableBody","slice","row","hover","role","tabIndex","code","format","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","MiniCard","statusType","cardStyle","tiles","type","IndianStatesTable","statesData","tableView","_id","scope","cured","death","IndiaStatus","indiaData","setIndiaData","districtData","setDistrictData","position","stateData","setStateData","selectedDistrict","setSelectedDistrict","active","coronaInfo","setCoronaInfo","stateTableData","setStateTableData","loadingTextSummary","loadingTextDetailed","loaders","setLoaders","stateDataSection","buttonShowStateData","indiaStatus","selectedDataHeading","formControl","indianState","pos","names","districtNames","handleStateChange","selectedIndex","disabled","district","covidInfo","deceased","handleDistrictSelect","App","fetchedData","setState","this","coronaImage","WorldTable","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e99b296.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__rnzyX\"};","module.exports = __webpack_public_path__ + \"static/media/sort-black.f94dfe67.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableView\":\"IndianStatesTable_tableView__19VlS\",\"MuiTableCell-root\":\"IndianStatesTable_MuiTableCell-root__2YTnx\"};","module.exports = __webpack_public_path__ + \"static/media/corona.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"worldTable_container__2oPiO\",\"width100\":\"worldTable_width100__2wUeC\",\"width70\":\"worldTable_width70__2hlmh\",\"root\":\"worldTable_root__2TtJs\",\"rootTable\":\"worldTable_rootTable__2Ilfb\",\"rootButton\":\"worldTable_rootButton__272uV\",\"sortText\":\"worldTable_sortText__YN-QW\",\"sortImage\":\"worldTable_sortImage__15FNf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indiaStatus\":\"IndiaStatus_indiaStatus__1-bbP\",\"selectedDataHeading\":\"IndiaStatus_selectedDataHeading__2sOGS\",\"formControl\":\"IndiaStatus_formControl__4HH3H\",\"selectedData\":\"IndiaStatus_selectedData__1rfr_\",\"stateDataSection\":\"IndiaStatus_stateDataSection__2q1kr\",\"buttonShowStateData\":\"IndiaStatus_buttonShowStateData__3nNlA\"};","import axios from \"axios\";\nconst url = \"https://covid19.mathdro.id/api\";\nconst tableAPI = \"https://sharadcodes.github.io/c-data/data/world.json\";\nconst IndianDistricts = \"https://api.covid19india.org/state_district_wise.json\";\nconst IndianStates = \"https://covid19-india-adhikansh.herokuapp.com/states\";\nexport const fetchData = async (country = \"\") => {\n  let tempUrl = url;\n  if (country !== \"\") {\n    tempUrl = `${url}/countries/${country}`;\n  }\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(tempUrl);\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (e) {\n    console.log(\"API fetch error\");\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      reportDate: new Date(dailyData.reportDate)\n        .toDateString()\n        .split(\"2020\")\n        .join(\"\"),\n    }));\n    return modifiedData;\n  } catch (e) {\n    console.log(\"API fetch error - fetch daily data\");\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n    return countries.map((country) => country.name);\n  } catch (e) {\n    console.log(\"fetch countries failed with \" + e);\n  }\n};\n\nexport const fetchTableData = async () => {\n  try {\n    const data = await axios.get(tableAPI);\n    const modifiedData = data.data.map((index) => ({\n      ...index,\n      casesSummary:\n        index.todayCases !== 0\n          ? `${index.cases}\n          +${index.todayCases} Today`\n          : index.cases,\n      deathSummary:\n        index.todayDeaths !== 0\n          ? `${index.deaths}\n          +${index.todayDeaths} Today`\n          : index.deaths,\n    }));\n    return modifiedData;\n  } catch (e) {\n    console.log(\"table API failed with \" + e);\n  }\n};\nexport const fetchIndiaData = async () => {\n  try {\n    const data = await axios.get(IndianDistricts);\n    const modifiedData = Object.entries(data.data).map((e) => ( { [e[0]]: e[1] } ));\n    const statesList = [];\n    for (let statesData of modifiedData) {\n      for (let stateName in statesData) {\n        statesList.push(stateName);\n      }\n    }\n    statesList.shift();\n    return [modifiedData, statesList];\n  }\n  catch(e) {\n    console.log('India API failed to fetch data')\n  }\n};\n\nexport const fetchIndianStatesReport = async() => {\n  try {\n    const data = await axios.get(IndianStates);\n    return data.data.state;\n  }\n  catch(e){ \n    console.log('fetch indian state report API failed');\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { fetchDailyData } from \"../../api/index\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Charts.module.css\";\n\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    fetchAPI();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ reportDate }) => reportDate),\n        datasets: [\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Infected\",\n            borderColor: \"#FF6550\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Recovered\",\n            borderColor: \"cornflowerblue\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Confirmed\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Charts;\n","import React, { useEffect, useState } from \"react\";\nimport { FormControl, NativeSelect, InputLabel } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../api/index\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n    fetchAPI();\n  }, []);\n\n  return (\n    <div className=\"row\">\n      <FormControl>\n        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n          Country\n        </InputLabel>\n        <NativeSelect onChange={(e) => handleCountryChange(e.target.value)}>\n          <option value=\"\">Global</option>\n          {countries.map((country, i) => (\n            <option key={i} value={country}>\n              {country}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport classnames from \"classname\";\nimport CountUp from 'react-countup';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (confirmed === undefined) {\n    return <p>Loading ...</p>;\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justfy=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={classnames(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n              <CountUp \n              start={0}\n              end={confirmed.value}\n              separator=','\n              duration={2}\n              />\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={classnames(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n            <CountUp \n              start={0}\n              end={recovered.value}\n              separator=','\n              duration={2}\n              />\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Number of recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={classnames(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n            <CountUp \n              start={0}\n              end={deaths.value}\n              separator=','\n              duration={2}\n              />\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Number of deaths from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  Divider,\n  TablePagination,\n  TableRow,\n  Button,\n} from \"@material-ui/core\";\nimport { fetchTableData } from \"../../api/index\";\nimport styles from \"./worldTable.module.css\";\nimport sortImage from \"../../images/sort-black.svg\";\nimport classnames from \"classname\";\n\nconst columns = [\n  {\n    id: \"country\",\n    label: \"Country\",\n    minWidth: 50,\n    align: \"left\",\n  },\n  {\n    id: \"casesSummary\",\n    label: \"Cases\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"deathSummary\",\n    label: \"Deaths\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"recovered\",\n    label: \"Recovered\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"active\",\n    label: \"Active\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"critical\",\n    label: \"Critical\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"tests\",\n    label: \"Tests\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"casesPerOneMillion\",\n    label: \"Cases/Million\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"deathsPerOneMillion\",\n    label: \"Deaths/Million\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"recoveredPerOneMillion\",\n    label: \"Recovered/Million\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"activePerOneMillion\",\n    label: \"Active/Million\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"criticalPerOneMillion\",\n    label: \"Critical/Million\",\n    minWidth: 50,\n    align: \"right\",\n  },\n  {\n    id: \"testsPerOneMillion\",\n    label: \"Tests/Million\",\n    minWidth: 50,\n    align: \"right\",\n  },\n];\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  container: {\n    maxHeight: 800,\n  },\n});\n\nfunction StickyHeadTable() {\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(20);\n  const [rows, setRows] = useState([]);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const fetchWorldData = async () => {\n    setRows(await fetchTableData());\n  };\n\n  useEffect(() => {\n    fetchWorldData();\n  }, []);\n\n  const handleSortByCases = () => {\n    setRows(\n      [...rows].sort((a, b) => {\n        return b.cases - a.cases;\n      })\n    );\n  };\n\n  const handleSortByDeaths = () => {\n    setRows(\n      [...rows].sort((a, b) => {\n        return b.deaths - a.deaths;\n      })\n    );\n  };\n\n  const handleSortByRecovered = () => {\n    setRows(\n      [...rows].sort((a, b) => {\n        return b.recovered - a.recovered;\n      })\n    );\n  };\n\n  const clearSort = () => {\n    fetchWorldData();\n  };\nif (rows === []) {\n  return <p>Loading...</p>;\n  }\n  return (\n    <React.Fragment>\n    <Divider className={styles.width70}/>\n    <br />\n    <div className={styles.container}>\n      <div className={classnames(styles.width100, \"row\")}>\n        <div className={classnames(styles.root, \"col-sm-12\")}>\n          <h6 className={styles.sortText}>\n            <img src={sortImage} alt=\"sort\" className={styles.sortImage} />\n            Sort\n          </h6>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            className={styles.rootButton}\n            onClick={handleSortByCases}\n          >\n            Cases\n          </Button>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            className={styles.rootButton}\n            onClick={handleSortByDeaths}\n          >\n            Deaths\n          </Button>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"primary\"\n            className={styles.rootButton}\n            onClick={handleSortByRecovered}\n          >\n            Recovered\n          </Button>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"primary\"\n            className={styles.rootButton}\n            onClick={clearSort}\n          >\n            Clear Sort\n          </Button>\n        </div>\n      </div>\n      <div className={styles.rootTable}>\n        <Paper className={classes.root}>\n          <TableContainer className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\" size=\"small\">\n              <TableHead>\n                <TableRow>\n                  {columns.map((column) => (\n                    <TableCell\n                      key={column.id}\n                      align={column.align}\n                      style={{ minWidth: column.minWidth }}\n                    >\n                      {column.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {rows\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row) => {\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        key={row.code}\n                      >\n                        {columns.map((column) => {\n                          const value = row[column.id];\n                          return (\n                            <TableCell key={column.id} align={column.align}>\n                              {column.format && typeof value === \"number\"\n                                ? column.format(value)\n                                : value}\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    );\n                  })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[20,50,100,150,200,300]}\n            component=\"div\"\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n          />\n        </Paper>\n      </div>\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default StickyHeadTable;\n","import React from 'react';\nimport cardStyle from './MiniCard.module.css';\nimport classnames from \"classname\";\nimport CountUp from 'react-countup';\n\nfunction MiniCard({statusType, count}) {\n    return (\n        <div className={classnames(cardStyle.tiles, cardStyle[statusType])}>\n            <h6 className={cardStyle.type}>{statusType}</h6>\n            <CountUp \n              start={0}\n              end={count}\n              separator=','\n              duration={2}\n              />\n          </div>\n    )\n}\n\nexport default MiniCard;","import React from 'react';\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow,Paper} from '@material-ui/core';\nimport styles from './IndianStatesTable.module.css';\n\nfunction IndianStatesTable({statesData}) {\n  return (\n    <TableContainer component={Paper} className={styles.tableView}>\n      <Table stickyHeader aria-label=\"sticky table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>State / UT</TableCell>\n            <TableCell align=\"right\">Confirmed</TableCell>\n            <TableCell align=\"right\">Recovered</TableCell>\n            <TableCell align=\"right\">Deaths</TableCell>\n            <TableCell align=\"right\">Total</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {statesData.map((row) => (\n            <TableRow key={row._id} >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.confirmed}</TableCell>\n              <TableCell align=\"right\">{row.cured}</TableCell>\n              <TableCell align=\"right\">{row.death}</TableCell>\n              <TableCell align=\"right\">{row.total}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default IndianStatesTable;","import React, { useState } from \"react\";\nimport { fetchIndiaData, fetchIndianStatesReport } from \"../../api/index\";\nimport { FormControl, NativeSelect, InputLabel } from \"@material-ui/core\";\nimport styles from \"./IndiaStatus.module.css\";\nimport classnames from \"classname\";\nimport Divider from '@material-ui/core/Divider';\nimport MiniCard from '../MiniCard/MiniCard';\nimport IndianStatesTable from '../IndianStatesTable/IndianStatesTable';\nimport {Button} from \"@material-ui/core\";\n\nfunction IndiaStatus() {\n  const [indiaData, setIndiaData] = useState();\n  const [districtData, setDistrictData] = useState([]);\n  const [stateData, setStateData] = useState({ name: \"\", position: 0 });\n  const [selectedDistrict, setSelectedDistrict] = useState(\"\");\n  const [coronaInfo, setCoronaInfo] = useState({\n    active: 0,\n    recovered: 0,\n    deaths: 0,\n    confirmed: 0,\n  });\n\n  const [stateTableData, setStateTableData] = useState([]);\n  const [loaders, setLoaders] = useState({loadingTextSummary: false, loadingTextDetailed: false});\n\n  const handleStateChange = (indianState, pos) => {\n    //indiaData[0][2]['Andhra Pradesh'].districtData\n    setSelectedDistrict('');\n    const names =\n      indianState !== \"\" && indiaData[0][pos][indianState].districtData;\n    const districtNames = [];\n    for (let name in names) {\n      districtNames.push(name);\n    }\n    setStateData({ name: indianState, position: pos });\n    setDistrictData(districtNames);\n  };\n\n  const handleDistrictSelect = (district) => {\n    setSelectedDistrict(district);\n    if (district !== '' ) {\n    const { name, position } = stateData;\n    const covidInfo = indiaData[0][position][name].districtData[district];\n      setCoronaInfo({\n        active: covidInfo.active || 0,\n        recovered: covidInfo.recovered || 0,\n        confirmed: covidInfo.confirmed || 0,\n        deaths: covidInfo.deceased || 0,\n      });\n    }\n  };\n\n  const handleShowSummary = () => {\n    setLoaders({...loaders, loadingTextSummary: true});\n    const fetchAPI = async () => {\n      setStateTableData(await fetchIndianStatesReport());\n      setLoaders({...loaders, loadingTextSummary: false});\n    };\n    fetchAPI();\n  }\n\n  const handleShowDetailed = () => {\n    setLoaders({...loaders, loadingTextDetailed: true});\n    const fetchAPI = async () => {\n      setIndiaData(await fetchIndiaData());\n      setLoaders({...loaders, loadingTextDetailed: false});\n    };\n    fetchAPI();\n  }\n    return (\n      <React.Fragment>\n      <div className={styles.stateDataSection}>\n        <Divider />\n        {stateTableData && stateTableData.length === 0 && <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={styles.buttonShowStateData}\n          onClick={handleShowSummary} >State Summary\n        </Button>}\n        {loaders.loadingTextSummary && <p>Loading...</p>}\n        { \n        stateTableData && stateTableData.length>0 &&\n        <React.Fragment>\n        <br/>\n        <IndianStatesTable statesData={stateTableData}/>\n        </React.Fragment>}\n        <br/>\n        <Divider />\n      </div>\n      {!indiaData &&\n      <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={styles.buttonShowStateData}\n          onClick={handleShowDetailed}>State Detailed\n        </Button>\n        }\n        {loaders.loadingTextDetailed && <p>Loading...</p>}\n      {indiaData && <div className={styles.indiaStatus}>\n        <div className={classnames(styles.indiaStatus, styles.selectedDataHeading)}>\n          <FormControl className={styles.formControl}>\n            <InputLabel shrink id=\"state\">\n              State / UT\n            </InputLabel>\n            <NativeSelect\n              onChange={(e) =>\n                handleStateChange(e.target.value, e.target.selectedIndex)\n              }\n            >\n              <option value={''}>Select State</option>\n              {indiaData[1].map((item, i) => (\n                <option key={i} value={item}>\n                  {item}\n                </option>\n              ))}\n            </NativeSelect>\n          </FormControl>\n          <FormControl\n            className={styles.formControl}\n            disabled={!districtData.length > 0}\n          >\n            <InputLabel shrink id=\"district\">\n              District\n            </InputLabel>\n            <NativeSelect\n              onChange={(e) => handleDistrictSelect(e.target.value)}\n              value={selectedDistrict}\n            >\n              <option value={''}>Select District</option>\n              {districtData.map((item, i) => (\n                <option key={i} value={item}>\n                  {item}\n                </option>\n              ))}\n            </NativeSelect>\n          </FormControl>\n        </div>\n\n        {selectedDistrict !== '' && stateData.name !== '' && <div className={styles.indiaStatus}>\n          <MiniCard count={coronaInfo.active} statusType={'active'} />\n          <MiniCard count={coronaInfo.confirmed} statusType={'confirmed'} />\n          <MiniCard count={coronaInfo.recovered} statusType={'recovered'} />\n          <MiniCard count={coronaInfo.deaths} statusType={'deaths'} />\n        </div>}\n      </div>\n      }\n      </React.Fragment>\n    );\n}\n\nexport default IndiaStatus;\n","import React, { Component } from \"react\";\nimport { Cards, CountryPicker, Charts, WorldTable, IndiaStatus } from \"./Components/index\";\nimport styles from \"./app.module.css\";\nimport { fetchData } from \"./api/index\";\nimport  coronaImage from '../src/images/corona.png';\n  \nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({\n      data: fetchedData,\n    });\n  }\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({\n      data: fetchedData,\n      country: country\n    });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.coronaImage} src={coronaImage} alt='Corona'/>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Charts data={data} country={country} />\n        <h3>India Statistics</h3>\n        <IndiaStatus />\n        <h3>Global Statistics</h3>\n        <WorldTable />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tiles\":\"MiniCard_tiles__YCdnu\",\"type\":\"MiniCard_type__nxrWP\",\"active\":\"MiniCard_active__10PWD\",\"confirmed\":\"MiniCard_confirmed__WXP8Z\",\"recovered\":\"MiniCard_recovered__G6-rK\",\"deaths\":\"MiniCard_deaths__2GYkz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2JKVN\",\"coronaImage\":\"app_coronaImage__3giRr\"};"],"sourceRoot":""}